---
import { getCollection } from 'astro:content';
const sections = await getCollection('sections');
const sorted = sections.sort((a, b) => b.data.position - a.data.position);
---

<style>
    main {
        display: flex;
        flex-flow: column nowrap;
        row-gap: 1rem;
        column-gap: var(--line-thickness);
        max-width: 960px;
        margin-inline: auto;
        padding-inline: var(--line-thickness);
        position: relative;

        background-image: linear-gradient(90deg,
            var(--line1-color) 0,
            var(--line1-color) calc(100% / 3),
            var(--line2-color) calc(100% / 3),
            var(--line2-color) calc(200% / 3),
            var(--line3-color) calc(200% / 3),
            var(--line3-color) 100%
        );
        background-size: calc(var(--line-thickness) * 3);
        background-repeat: no-repeat;
        background-position-x: right;
        background-position-y: calc(var(--line-thickness) * 4);
    }

    .section-header h2 {
        color: var(--line1-color);
    }

    .section-body {
        position: relative;
        border-top-style: solid;
        border-top-width: var(--line-thickness);
        border-top-right-radius: calc(var(--line-thickness) * 2);
        border-right-style: solid;
        border-right-width: var(--line-thickness);
        padding-inline-end: var(--line-thickness);
    }

    section:nth-child(2n+1) .section-body {
        border-color: var(--line1-color);
        margin-right: calc(var(--line-thickness) * 1);
    }

    section:nth-child(2n) .section-body {
        border-color: var(--line3-color);
        margin-right: calc(var(--line-thickness) * -1);
    }

    .section-body:before {
        content: '';
        position: absolute;
        bottom: 100%;
        display: block;
        aspect-ratio: 1;
        width: var(--line-thickness);
        background: black;
        border-radius: 100vw;
        border-style: solid;
        border-width: 3px;
        border-color: inherit;
        right: calc(100% - (var(--line-thickness) / 2));
    }

    @media (min-width: 900px) {
        main {
            background-position-x: center;
            flex-flow: column wrap;
            
            /** For dev purposes, needs to be determined by the JS below */
            height: 2360px;
        }

        section {
            width: calc(50% - (var(--line-thickness) / 2));
        }

        section:nth-child(2n+1) {
            order: 1;
        }

        section:nth-child(2n) {
            order: 2;
        }

        section:nth-child(2) { 
            margin-block-start: calc(var(--line-thickness) * 3);
        }

        section:nth-child(2n+1) .section-body {
            margin-right: 0;
        }

        section:nth-child(2n) .section-header {
            margin-left: calc(var(--line-thickness) * 2);
        }

        section:nth-child(2n) .section-body {
            border-right: none;
            border-top-right-radius: 0;
            border-left: var(--line-thickness) solid var(--line3-color);
            border-top-left-radius: calc(var(--line-thickness) * 2);
            padding-inline-end: 0;
            padding-inline-start: var(--line-thickness);
            margin-right: 0;
        }

        section:nth-child(2n) .section-body:before {
            left: calc(100% - (var(--line-thickness) / 2));
            border-color: var(--line3-color);
        }

    }

</style>

<main>
    { sorted.map(async (content) => {
        const { Content } = await content.render();
         return (
            <section style={ `--section-color: ${content.data.color}` }>
                <div class="section-header">
                    <h2>{ content.data.title }</h2>
                </div>
                <div class="section-body">
                    <Content/>
                </div>
            </section>
         )
    }) }
</main>

<script>
    const $main = document.querySelector('main') as HTMLElement;
    const { children } = $main;

    function mainSize() {
        // Bail if not meant for two columns
        if (matchMedia('min-width: 900px')) {
            $main.style.removeProperty('height');
            return;
        };

        const avgSectionHeight = [...children].reduce((sum, $elem) => sum + $elem.clientHeight, 0) / children.length;

        const againstEdge = [...children].every(($child, i) => {
            if (i % 2 !== 0) return true;
            return $child.offsetLeft < ($main.clientWidth / 2);
        });

        if (!againstEdge) {
            $main.style.height = ($main.clientHeight + avgSectionHeight) + 'px';
        } else {
            const height = [...children].reduce((lowest, $child) => {
                const bottom = $child.offsetTop + $child.offsetHeight;
                return bottom > lowest ? bottom : lowest;
            }, 0);
            $main.style.height = Math.ceil(height + 16) + 'px';
        }
    }

    new ResizeObserver(mainSize).observe($main);
</script>